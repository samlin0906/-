#SSD (Single Shot Detector)
#基礎CNN網路使用ResNet
#input需轉成Blob格式


import argparse
import time
from os.path import exists
from urllib.request import urlretrieve

import cv2
import numpy as np
from imutils.video import WebcamVideoStream

prototxt = "deploy.prototxt"
caffemodel = "res10_300x300_ssd_iter_140000.caffemodel"

# 下載模型相關檔案
if not exists(prototxt) or not exists(caffemodel):
    urlretrieve(f"https://raw.githubusercontent.com/opencv/opencv/master/samples/dnn/face_detector/{prototxt}",
                prototxt)
    urlretrieve(
        f"https://raw.githubusercontent.com/opencv/opencv_3rdparty/dnn_samples_face_detector_20170830/{caffemodel}",
        caffemodel)


net = cv2.dnn.readNetFromCaffe(prototxt=prototxt, caffeModel=caffemodel)                            # 初始化模型 (模型使用的Input Size為 (300, 300))

# 初始化arguments
ap = argparse.ArgumentParser()
ap.add_argument("-c", "--confidence", type=float, default=0.5, help="minimum probability to filter detecteions")
args = vars(ap.parse_args())

vs = WebcamVideoStream().start()
time.sleep(1)

while True:
    img = vs.read()
    (h, w) = img.shape[:2]

    #blobFromImage(	image, scalefactor, size, mean, swapRB, crop, ddepth)
    blob = cv2.dnn.blobFromImage(cv2.resize(img, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))

    # 設定Input資料與取得模型預測結果
    net.setInput(blob)
    detectors = net.forward()

    rects = []
    min_confidence = 0.5                                                # 預設參數,可更改

    for i in range(0, detectors.shape[2]):
        confidence = detectors[0, 0, i, 2]                              # 取得預測準確度
        if confidence < min_confidence:
            continue

        # 計算bounding box(邊界框)與準確率 - 取得(左上X，左上Y，右下X，右下Y)的值
        box = detectors[0, 0, i, 3:7] * np.array([w, h, w, h])
        (x0, y0, x1, y1) = box.astype("int")                            # 將邊界框轉成正整數，方便畫圖
        rects.append({"box": (x0, y0, x1 - x0, y1 - y0), "confidence": confidence})


    # loop所有預測結果
    for rect in rects:
        (x, y, w, h) = rect["box"]
        confidence = rect["confidence"]

        # 畫出邊界框
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # 畫出準確率
        text = f"{round(confidence * 100, 2)}%"
        y = y - 10 if y - 10 > 10 else y + 10
        cv2.putText(img, text, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 0, 255), 2)



    # 顯示影像
    cv2.imshow("Frame", img)

    # 判斷是否案下"q"；跳離迴圈
    key = cv2.waitKey(1) & 0xff
    if key == ord('q'):
        break

cv2.destroyAllWindows()
vs.stop()
